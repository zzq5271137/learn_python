"""
正则表达式: 匹配单个字符
"""

import re

"""
匹配整个字符串, 即逐个字符进行匹配;

注: 
1. re.match(pattern, text)方法是从text的开头开始匹配, 即如果第一个字符不匹配, 则视为匹配0个; 
2. re.search(pattern, text)方法不是从头匹配, 它会从text的所有位置去尝试匹配;
"""
text = 'hello'
res = re.match('he', text)  # match()方法的第一个参数, 就是正则表达式; 在这个例子中, 只是简单地匹配'he'这整个字符串
print(res.group())

print("###############################################################")

"""
'.': 匹配任意一个字符
注意: "."匹配不到换行符(即'\n')
"""
text = 'hello'
res = re.match('.', text)
print(res.group())

print("###############################################################")

"""
'\d': 匹配任意一个数字字符
"""
text = '123'
res = re.match('\d', text)
print(res.group())

print("###############################################################")

"""
'\D': '\D'匹配的东西和'\d'相反, 即匹配任意一个非数字字符
"""
text = '+-*/'
res = re.match('\D', text)
print(res.group())

print("###############################################################")

"""
'\s': 匹配一个空白字符, 空白字符包括: \n、\t、\r、空格等
"""
text = '\t'
res = re.match('\s', text)
print(res.group())

print("###############################################################")

"""
'\w': 匹配一个a~z, 或者A~Z, 或者数字, 或者下划线('_')
"""
text = '_'
res = re.match('\w', text)
print(res.group())

print("###############################################################")

"""
'\W': '\W'匹配的东西和'\w'相反, 即匹配一个非a~z, 非A~Z, 非数字, 非下划线('_')的字符
"""
text = '+-*/'
res = re.match('\W', text)
print(res.group())

print("###############################################################")

"""
'[]': 组合的方式, 只要满足中括号中的内容就可以匹配到(里面是'或'的逻辑, 即, 一个'[]'只匹配一个字符);

之前讲的几种匹配规则, 其实也可以使用'[]'来表示:
\d: [0-9]
\D: [^0-9]
\w: [0-9a-zA-Z_]
\W: [^0-9a-zA-Z_]

注: 
1. '[]'中, '-'表示范围, 例如'[0-9]'表示匹配一个0~9的字符(即'\d'); 
2. '[]'中, '^'表示'非'或者叫'除了', 例如'[^0-9]'表示匹配一个非0~9的字符(即'\D');
"""
text = 'a'
res = re.match('[abcd]', text)  # '[abcd]'表示匹配一个字符, a或b或c或d都可以
print(res.group())
text = '0086-13910004800'
res = re.match('[\d\-]+', text)  # '-'有特殊含义(表示范围), 需要转义
print(res.group())
