"""
Python虚拟环境以及virtualenv介绍
"""

"""
为什么需要虚拟环境:
到目前为止, 我们所有的第三方包都是通过"pip install xxx"的方式进行安装的, 这样安装会将安装的包放到你的系统级的Python环境中,
即你在系统的环境变量中配置的Python; 但这样有一个问题, 例如, 如果你现在用Django 1.10.x写了个网站, 然后你的领导说,
之前有一个旧的项目使用Django 0.9开发的, 让你来维护, 但是Django 1.10.x不再兼容Django 0.9的语法了;
这时候你会碰到一个问题, 我如何在我的电脑中同时拥有Django 1.10和Django 0.9两套环境呢？
这时候我们就可以通过虚拟环境来解决这个问题;

虚拟环境原理介绍:
虚拟环境相当于一个抽屉, 在这个抽屉中安装的任何软件包都不会影响其他抽屉(也不会影响系统级的环境), 就像我们装的虚拟机一样;
并且在项目中, 我们可以指定这个项目使用的虚拟环境来配合我们的项目; 比如我们现在有一个项目是基于Django 1.10.x的版本,
又有一个项目是基于Django 0.9.x的版本, 那么这时候就可以创建两个虚拟环境, 在这两个虚拟环境中分别安装Django 1.10.x和Django 0.9.x;

virtualenv:
virtualenv是用来创建虚拟环境的软件工具, 我们可以通过pip或pip3来安装: pip install virtualenv, 基本使用:
1. 创建虚拟环境:
   执行"virtualenv 虚拟环境的名字"命令; 
   创建的虚拟环境的文件会放在你控制台当前所处的目录下;
   如果你当前机器的环境变量的配置中, Python3/Scripts的查找路径在Python2/Scripts的前面, 
   那么将会使用Python3作为这个虚拟环境的解释器; 如果Python2/Scripts的查找路径在Python3/Scripts的前面,
   那么将会使用Python2作为这个虚拟环境的解释器(以上讨论的情景是在你的机器上安装了Python2和Python3,
   并且他们都安装了virtualenv的情况下);
   还有一种方式是在创建虚拟环境时使用"-p"参数手动指定虚拟环境使用的Python解释器:
   执行"virtualenv -p Python解释器的绝对路径 虚拟环境的名字"命令;
2. 进入虚拟环境:
   虚拟环境创建好了以后, 那么就可以进入虚拟环境, 然后安装你需要的包; 进入虚拟环境在不同的操作系统中有不同的方式,
   一般分为两种:
   1). Windows
       进入到你创建的虚拟环境的Scripts文件夹中, 然后执行activate;
   2). Linux
       执行"source /path/to/virtualenv/bin/activate"命令;
   如果命令行的左边出现了"(虚拟环境的名字)", 说明已经进入到虚拟环境了; 进入到虚拟环境后,
   你再使用"python 文件名"去运行代码, 就是使用虚拟环境的Python解释器去运行的代码;
   一旦你进入虚拟环境中, 你安装包、卸载包都是在这个虚拟环境中, 不会影响到外面的环境;
   如果想在PyCharm中使用虚拟环境作为你项目的解释器, 那么可以在Settings->Project Interpreter里面进行配置;
3. 退出虚拟环境:
   无论你在哪个虚拟环境中, 无论你控制台当前处在什么目录下, 只需要执行"deactivate"命令, 就可以退出当前的虚拟环境;
   这个执行的"deactivate"命令并不是在虚拟环境的Scripts目录下查找的, 而是在你系统配置的系统变量中,
   你的配置的Python3/Scripts目录下查找的; 所以, 无论你在任何目录下, 执行"deactivate"命令, 都会退出虚拟环境;
"""
