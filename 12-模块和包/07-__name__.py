"""
__name__魔术变量
"""

"""
我们都知道, 当导入一个模块时, 会直接运行导入的那个文件; 如果一个文件/模块是作为被导入的模块来运行的,
那么它就不是作为主运行文件来执行的; 而现在这个文件(07-__name__.py), 我们是直接运行的(通过IDE的运行工具或者命令行), 
那么我们说这个文件是作为主运行文件去执行的(即我们主动地去运行它);

通过运行这里的代码, 我们可以发现, 我们导入name_import模块时运行打印出的__name__不是__main__,
而这里打印的__name__是__main__; 也就是说, __name__的值并不是永远是__main__, 只有当当前文件是主运行文件时,
__name__的值才是__main__;
(注意观察__name__在模块文件中以及在__init__.py文件中打印的是什么)
"""

from name_test import name_import

# 使用__name__变量不需要导入任何东西, 在任何一个Python文件中都是存在的
print("in 07-__name__.py(current file), __name__ = %s" % __name__)

print("#############################################################")

"""
所以可以使用以下这种写法
"""


def main():
    print("只有当此文件作为主文件在执行时的执行逻辑...")


if __name__ == '__main__':  # 如果为True, 则说明当前这个文件是作为主文件在执行
    main()
