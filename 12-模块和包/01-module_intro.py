"""
模块和包
"""

import os  # os模块专门处理与操作系统相关的一些操作

from my_package import my_request as request_opt
from my_package import my_file as file_opt

"""
为什么需要模块和包:
随着项目越来越大, 所有代码都放在一个文件中, 已经不能满足我们的需求了; 这时就需要对代码进行整理了,
模块和包的出现就是为了解决这个问题的; 模块可以将一些相关联的代码组合在一个.py文件中,
包可以将一些相关联的模块组合在一个文件夹中;

将一个模块导入到当前文件中的几种方式:
1. import 模块名: 
   导入某个模块, 以后要使用模块中的函数或者方法或者变量, 则需要使用"模块名.xxx"的形式调用
2. from 包名 import 模块名:
   从某个包中导入某个模块, 以后要使用模块中的函数或者方法或者变量, 则需要使用"模块名.xxx"的形式调用
3. from 模块名 import xxx:
   从某个模块中导入某个对象或者方法等; 也可以一次性的从模块中导入所有对象: from 模块名 import *
   以这种方式导入模块内容, 以后要使用模块中的函数或者方法或者变量, 可以直接使用相应的名称, 不需要加"模块名.";
   注: 这里的"模块名"可能会包含路径, 比如"包名1.包名2.模块名", 其中, 模块在包2下, 包2在包1下, 然后包1是在sys.path中的某个路径中可以找到的
4. from a import b as c:
   从a中导入b并命名为c, 以后要在代码中使用b, 则通过c来使用
   
包:
包本质上就是一个文件夹, 将一些相关联的模块组合在一起; 但如果一个文件夹要让Python识别为一个包, 
则必须在这个文件夹中创建一个叫做"__init__.py"的文件, 一个文件夹只有拥有了"__init__.py"这个文件,
才能被视为一个包; 在Python3中, 在同一个包中的模块如果要互相导入, 有两种方式:
1. 绝对路径的方式:
   即, from 包1.包2 import 模块名 
   或者, import 包1.包2.模块名
   其中, 模块在包2下, 包2在包1下, 然后包1是在sys.path中的某个路径中可以找到的
2. 相对路径的方式:
   即: from . import 模块名 
   (一个"."代表当前目录, 两个".."表示上级目录)
示例详见: my_package/my_request.py

注: 如果你导入了某个包或模块, 那么Python会马上将那个模块中的代码立即执行一遍
"""

print("#####################################################")

print(os.getcwd())  # 获取当前文件在文件系统中的路径
print(os.listdir())  # 获取当前文件所在目录下的文件列表

print("#####################################################")

file_opt.save_data(request_opt.get_request('https://www.baidu.com'))
