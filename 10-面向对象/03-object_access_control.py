"""
类的访问限制(面向对象特性之封装)
"""

"""
1. 受保护的属性和方法:
   有时候类中的属性或方法不想被外界调用, 但还是可以被外界调用, 那么就叫做受保护的属性和方法;
   即类的开发者表达出该属性或方法不想被外界调用的意愿, 但外界依然可以调用;
   受保护的属性或方法, 使用一个下划线开头;
2. 私有的属性和方法:
   有时候类中的属性或方法不让外界调用, 那么就可以将其定义为私有的属性或方法;
   私有的属性或方法, 使用两个下划线开头;
"""


class Person(object):
    def __init__(self, name, age):
        self._name = name  # 受保护的属性
        self.__age = age  # 私有的属性

    def _eat(self):  # 受保护的方法
        print("%s在吃饭..." % self._name)

    def __jump(self):  # 私有方法, 只能在类中被调用
        print("%s准备跳下..." % self._name)


p1 = Person('zzq', 100)
print(p1._name)  # 会打印出_name, 但这是违背开发者意愿的
# print(p1.__age)  # 会报错
p1._eat()  # 能够调用成功, 但是这是违背开发者意愿的
# p1.__jump()  # 会报错

print("##############################################################################")

"""
注意点:
1. 私有方法或属性不是说100%不能被外界调用, 例如私有属性__age, 可以通过_Person__age的方式来访问,
   即在私有属性名或方法名前加上"_类名", 但这样是非常不推荐的; 
2. __init__等方法不是私有方法, 而是特殊方法;
"""
print(p1._Person__age)  # 会访问成功, 但是非常不推荐的
p1._Person__jump()  # 会访问成功, 但是非常不推荐的
